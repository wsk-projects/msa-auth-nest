name: Isuse open actions

on:
  issues:
    types: [opened]

jobs: 
  # context 출력
  log-context: 
    runs-on: ubuntu-latest

    steps:
      - name: Console log context
        uses: actions/github-script@v7
        with:
          script: console.log(JSON.stringify(context, null, 2));

  # assignee 등록
  assign-author:
    runs-on: ubuntu-latest
    permissions:
      issues: write # 이슈에 assignee 수정 권한

    steps:
      - name: Assign issue author
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.payload.issue.number;
            const issueAuthor = context.payload.issue.user.login;

            console.log(`Assigning @${issueAuthor} to issue#${issueNumber}`);

            await github.rest.issues.addAssignees({
              ...context.repo,
              issue_number: issueNumber,
              assignees: [issueAuthor]
            });
  

  # 브랜치 생성
  create-branch:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 브랜치 생성 권한

    steps:
      - name: Create branch from develop
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.payload.issue.number;
            const baseBranch = 'develop';
            const targetBranch = `issue/${issueNumber}`;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // develop 브랜치에서 커밋 SHA 가져오기
            const base = await github.rest.repos.getBranch({
              owner,
              repo,
              branch: baseBranch,
            });
            const baseSha = base.data.commit.sha;

            // 브랜치 생성
            try {
              await github.rest.git.createRef({
                owner,
                repo,
                ref: `refs/heads/${targetBranch}`,
                sha: baseSha,
              });
            } catch (err) {
              if (err.status === 422) {
                console.log('Branch already exists. Skipping.');
              } else {
                throw err;
              }
            }

            // develop 커밋의 트리 SHA 가져오기
            const baseCommit = await github.rest.git.getCommit({
              owner,
              repo,
              commit_sha: baseSha,
            });
            const treeSha = baseCommit.data.tree.sha;

            // 빈 커밋 생성
            const emptyCommit = await github.rest.git.createCommit({
              owner,
              repo,
              message: `Created branch for issue #${issueNumber}\n\n[skip ci]`,
              tree: treeSha,
              parents: [baseSha],
            });

            // 브랜치 업데이트
            await github.rest.git.updateRef({
              owner,
              repo,
              ref: `heads/${targetBranch}`,
              sha: emptyCommit.data.sha,
              force: false,
            });

  # 풀 리퀘스트 생성
  create-pull-request:
    needs: create-branch
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Create draft pull request
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.payload.issue.number;
            const issueTitle = context.payload.issue.title;
            const targetBranch = `issue/${issueNumber}`;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            await github.rest.pulls.create({
              owner,
              repo,
              title: `${issueTitle}`,
              head: targetBranch,
              base: 'develop',
              body: `Closes #${issueNumber}`,
              draft: true
            });
